{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,sBAAMC,SAVa,SAAAC,GACnBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,YAAY,iBACZC,MAAOV,EACPW,SAnBoB,SAAAR,GACxBF,EAAcE,EAAES,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEEI,MAAMF,GAFR,cAEfG,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAThB,kBAadM,GAbc,4CAAH,sDCcLO,EAZK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,sBAAKc,UAAU,6CAAf,UACE,qBACEC,IAAKf,EACLgB,IAAKN,IAEP,4BAAIA,QCoBKO,EAvBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAAA,GAAa,IAAD,EACZf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAVAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAX,GACJS,EAAS,CACPf,KAAMM,EACNO,SAAS,SAGd,CAACpB,IAEGqB,EDb0BI,CAAazB,GAAjCa,EADmB,EACxBN,KAAaa,EADW,EACXA,QAErB,OACE,qCACE,oBACEJ,UAAU,oDADZ,SAGGhB,IAEFoB,GAAW,mBAAGJ,UAAU,wCAAb,wBACZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAC,GAAG,OACb,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEORe,EAtBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,kBADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CACEA,cAAeA,IAEjB,uBACA,6BACGS,EAAWgB,KAAI,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MCXjB2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.609de0d7.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"Type something\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=CGOm3laQcgXUSluMYxjzQ1V41KSKhuz5`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  });\n\n  return gifs;\n};\n","import React from 'react';\n\nconst GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__backInDown\">\n      <img\n        src={url}\n        alt={title}\n      />\n      <p>{title}</p>\n    </div>\n  );\n};\n\nexport default GifGridItem;\n","import React from 'react';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3\n        className=\"card animate__animated animate__lightSpeedInRight\"\n      >\n        {category}\n      </h3>\n      {loading && <p className=\"card animate__animated animate__flash\">Loading...</p>}\n      <div className=\"card-grid\">\n          {images.map(img =>\n            <GifGridItem\n              key={img.id}\n              {...img}\n            />\n          )}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = category => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGifs(category)\n      .then(images => {\n        setState({\n          data: images,\n          loading: false\n        });\n      });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Dragon Ball Z']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory\n        setCategories={setCategories}\n      />\n      <hr />\n      <ol>\n        {categories.map(category => \n          <GifGrid\n            key={category}\n            category={category}\n          />\n        )}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}